#include <avr/interrupt.h>
#include <Wire.h>
#include <Tiny4kOLED.h>

const byte LED_RUN   = 1;
const byte BTN_START = 4;
const byte BTN_RESET = 3;

volatile uint32_t msElapsed = 0;
volatile bool     running   = false;

uint32_t lastStartMs = 0;
uint32_t lastResetMs = 0;
const uint16_t LOCK_MS = 1000;

const uint8_t X_MIN = 24;
const uint8_t X_SEC = X_MIN + 40;
const uint8_t Y_TOP = 0;

void updateField(uint8_t value, uint8_t x) {
  char buf[3];
  oled.setFontX2(FONT8X16P);
  oled.setCursor(x, Y_TOP);
  oled.print(F("  "));
  snprintf(buf, sizeof buf, "%02u", value);
  oled.setCursor(x, Y_TOP);
  oled.print(buf);
}

void drawTime(uint8_t mm, uint8_t ss) {
  static uint8_t prevMM = 255, prevSS = 255;
  static bool colonDrawn = false;

  if (mm != prevMM) { updateField(mm, X_MIN); prevMM = mm; }
  if (ss != prevSS) { updateField(ss, X_SEC); prevSS = ss; }

  if (!colonDrawn) {
    oled.setFont(FONT8X16P);
    oled.setCursor(X_MIN + 32, 1);
    oled.print(':');
    colonDrawn = true;
  }
}

void setup() {
  pinMode(LED_RUN, OUTPUT);
  pinMode(BTN_START, INPUT_PULLUP);
  pinMode(BTN_RESET, INPUT_PULLUP);

  oled.begin();
  oled.clear();
  drawTime(0, 0);
  oled.on();

  TCCR1  = (1 << CTC1) | (1 << CS12) | (1 << CS11) | (1 << CS10);
  OCR1C  = (F_CPU / 64000UL) - 1;
  TIMSK |= (1 << OCIE1A);
  sei();
}

void loop() {
  uint32_t nowMs = millis();

  static bool pStart = HIGH;
  bool s = digitalRead(BTN_START);
  if (pStart && !s && (nowMs - lastStartMs >= LOCK_MS)) {
    running = !running;
    lastStartMs = nowMs;
  }
  pStart = s;

  static bool pReset = HIGH;
  bool r = digitalRead(BTN_RESET);
  if (pReset && !r && !running && (nowMs - lastResetMs >= LOCK_MS)) {
    cli(); msElapsed = 0; sei();
    lastResetMs = nowMs;
  }
  pReset = r;

  uint32_t msCopy; cli(); msCopy = msElapsed; sei();

  static uint32_t prevSec = 0xFFFFFFFF;
  uint32_t tSec = msCopy / 1000;
  if (tSec != prevSec) {
    prevSec = tSec;
    drawTime(tSec / 60 % 100, tSec % 60);
  }

  static uint16_t blink = 0;
  if (running) {
    if (++blink >= 250) { blink = 0; PINB |= _BV(LED_RUN); }
  } else {
    digitalWrite(LED_RUN, LOW);
    blink = 0;
  }
}

ISR(TIMER1_COMPA_vect) {
  if (running) ++msElapsed;
}
